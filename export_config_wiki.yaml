metrics:
    STCYC:
        name: STCYC
        brief: Cyclomatic complexity
        description: 'Cyclomatic complexity is calculated as the number of decisions plus 1. High cyclomatic complexity indicates inadequate modularization or too much logic in one function. Software metric research has indicated that functions with a cyclomatic complexity greater than 10 tend to have problems related to their complexity.'
        histogram_num_bins: 9
        histogram_minval: 1
        histogram_maxval: 20
        histogram_title_xaxis: Cyclomatic complexity (STCYC)
        histogram_title_yaxis: Number of functions
        data_type: int 
        metric_type: function
    STLIN:    
        name: STLIN
        brief: Number of maintainable lines of code
        description: 'This is the total number of lines, including blank and comment lines, in a function definition between (but excluding) the opening and closing brace of the function body. It is computed on raw code. STLIN is undefined for functions which have #includeâ€™d code or macros which include braces in their definition.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 100
        histogram_title_xaxis: Number of maintainable lines of code (STLIN)
        histogram_title_yaxis: Number of functions
        data_type: int
        metric_type: function
    STPAR:    
        name: STPAR
        brief: Number of function parameters
        description: 'This metric is a count of the number of declared parameters for each function.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10
        histogram_title_xaxis: Number of function parameters (STPAR)
        histogram_title_yaxis: Number of functions
        data_type: int
        metric_type: function
    STPTH:    
        name: STPTH
        brief: Estimated static path count
        description: 'This gives an upper bound on the number of possible paths in the control flow of the function. It is the number of non-cyclic execution paths in a function.'
        histogram_num_bins: 9
        histogram_minval: 1
        histogram_maxval: 20
        histogram_title_xaxis: Estimated static path count (STPTH)
        histogram_title_yaxis: Number of functions
        data_type: int
        metric_type: function
    STSUB:    
        name: STSUB
        brief: Number of Function Calls
        description: 'The number of function calls within a function. Functions with a large number of function calls are more difficult to understand because their functionality is spread across several components. Note that the calculation of STSUB is based on the number of function calls and not the number of distinct functions that are called.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 20
        histogram_title_xaxis: Number of function calls (STSUB)
        histogram_title_yaxis: Number of functions
        data_type: int      
        metric_type: function
    STXLN:    
        name: STXLN
        brief: Number Of Executable Lines
        description: 'The metric can be used to determine whether there are enough statement lines in a module to make certain statistics significant, such as density of decisions.'
        histogram_num_bins: 9
        histogram_minval: 1
        histogram_maxval: 20
        histogram_title_xaxis: Number Of Executable Lines (STXLN)
        histogram_title_yaxis: Number of functions
        data_type: int
        metric_type: function
    STGTO:    
        name: STGTO
        brief: Number of goto statements
        description: 'Some occurrences of goto simplify error handling. However, they should be avoided if at all possible.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Number of goto statements (STGTO)
        histogram_title_yaxis: Number of functions
        data_type: int 
        metric_type: function
    STMIF:    
        name: STMIF
        brief: Maximum Nesting Of Control Structures
        description: 'This metric is a measure of the maximum control flow nesting in your source code. You can reduce the value of this metric by turning your nesting into separate functions. This will improve the readability of the code, by reducing both the nesting and the average cyclomatic complexity per function.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Maximum Nesting Of Control Structures (STMIF)
        histogram_title_yaxis: Number of functions
        data_type: int 
        metric_type: function
    STCDN:    
        name: STCDN
        brief: Comment to code ratio
        description: 'This metric is defined to be the number of visible characters in comments divided by the number of visible characters outside comments. Comment delimiters are ignored. Whitespace characters in strings are treated as visible characters. A large metric value may indicate that there are too many comments - an attribute that can make a module difficult to read. A small value may indicate that there are not enough.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Comment to code ratio (STCDN)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file    
    STOPN:    
        name: STOPN
        brief: Halstead Distinct Operands 
        description: 'This is the number of distinct operands used in the file. Distinct operands are defined as unique identifiers and each occurrence of a literal. Most literals, except 0 and 1, are usually distinct within a program. Since macros are usually used for fixed success and failure values (such as TRUE and FALSE), the differences in counting strategies are fairly minimal.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Halstead Distinct Operands (STOPN)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file    
    STOPT:    
        name: STOPT
        brief: Halstead Distinct Operators  
        description: 'This covers any source code tokens not supplied by the user e.g. keywords, operators, punctuation. STOPT is used in the calculation of a number of other metrics.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Halstead Distinct Operators (STOPT)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file  
    STTLN:    
        name: STTLN
        brief: Total Preprocessed Code Lines
        description: 'This metric is a count of the total number of lines in the file, after preprocessing. The preprocessed file will reflect the processing of include files, preprocessor directives, and the stripping of comment lines.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Preprocessed Code Lines (STTLN)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file  
    STTOT:    
        name: STTOT
        brief: Total Number Of Tokens Used
        description: 'This metric is the total number of tokens, not distinct tokens, in the source file.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Number Of Tokens Used (STTOT)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file 
    STTPP:    
        name: STTPP
        brief: Total Unpreprocessed Source Lines 
        description: 'This metric is a count of the total number of source lines in the file, before pre-processing.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Unpreprocessed Source Lines (STTPP)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file 
    STVAR:    
        name: STVAR
        brief: Number Of Identifiers
        description: 'The total number of distinct identifiers.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Number Of Identifiers (STVAR)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file
    STCCA:    
        name: STCCA
        brief: Total Number Of Characters
        description: 'This metric is the total number of characters in the file. Only visible characters are counted, except in string or character literals, in which case all characters are counted. Tabs are treated as one character. When counting comment characters, the comment delimiter characters are included in the count.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Number Of Characters (STCCA)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file  
    STCCB:    
        name: STCCB
        brief: Total Number of Code Characters
        description: 'This metric is the total number of code characters in the file. Only visible characters are counted, except in string or character literals, in which case all characters are counted, and tabs are treated as one character. Characters comprising comments, including the comment delimiter characters, are not counted.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Number of Code Characters (STCCB)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file  
    STCCC:    
        name: STCCC
        brief: Total Number Of Comment Characters
        description: 'This metric is the total number of visible comment characters in the file. The comment delimiter characters are not counted.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 2.0
        histogram_title_xaxis: Total Number Of Comment Characters (STCCC)
        histogram_title_yaxis: Number of files
        data_type: float  
        metric_type: file  
    STCBO:    
        name: STCBO
        brief: Coupling between objects
        description: 'This is a count of the number of methods (member functions) or member objects of other classes accessed by a class. Only classes outside the inheritance hierarchy are considered, because you would expect interaction with base and derived classes. Coupling to classes outside the inheritance tree should be viewed with suspicion as it makes the class less 4 independent and less re-usable.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10
        histogram_title_xaxis: Coupling between objects (STCBO)
        histogram_title_yaxis: Number of classes 
        data_type: int 
        metric_type: class
    STDIT:    
        name: STDIT
        brief: Deepest level of inheritance
        description: 'This represents the number of derivations from the furthest base class down to this class. A high figure may indicate that the class depends on accumulated functionality, which makes understanding the class potentially difficult. This is one of the metrics defined by Chidamber & Kemerer.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10
        histogram_title_xaxis: Deepest level of inheritance (STDIT)
        histogram_title_yaxis: Number of classes 
        data_type: int  
        metric_type: class
    STLCM:    
        name: STLCM
        brief: Lack of cohesion of methods within a class
        description: 'Methods within a class are partitioned into sets that access independent sets of member objects. The STLCM metric is a count of sets of unrelated members for a type.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Lack of cohesion of methods within a class (STLCM)
        histogram_title_yaxis: Number of classes
        data_type: int 
        metric_type: class
    STMTH:    
        name: STMTH
        brief: Number of methods available in class
        description: 'The number of methods declared within a class. This does not include methods declared in base classes. Classes with a large number of methods will be difficult to understand.'
        histogram_num_bins: 20
        histogram_minval: 0
        histogram_maxval: 20
        histogram_title_xaxis: Number of methods available in class (STMTH)
        histogram_title_yaxis: Number of classes
        data_type: int  
        metric_type: class
    STNOC:    
        name: STNOC
        brief: Number of immediate children
        description: 'This is the number of classes for which this class is an immediate base class. A high figure for
this metric indicates greater dependence on the functionality of this class, and more potential
knock-on effects from changes to it.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Number of immediate children (STNOC)
        histogram_title_yaxis: Number of classes
        data_type: int 
        metric_type: class
    STNOP:    
        name: STNOP
        brief: Number of immediate parents
        description: 'This metric indicates the number of inheritances for a class. Root base classes have a value of 0 while classes derived with a single inheritance have a value of 1. Classes that have multiple inheritance are prohibited by some programming standards.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Number of immediate parents (STNOP)
        histogram_title_yaxis: Number of classes
        data_type: int 
        metric_type: class
    STRFC:    
        name: STRFC
        brief: Response For Class
        description: 'This indicates how functions can potentially be called directly from the class. Each method counts towards the possible response set, as well as each further function or method that can be called by the methods of the class. Note that it is not possible to perform global analysis of the response set, since this metric is calculated on a per file basis; however, the functional dependency of a class can be determined solely by considering the first level response set.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Response For Class (STRFC)
        histogram_title_yaxis: Number of classes
        data_type: int 
        metric_type: class
    STWMC:    
        name: STWMC
        brief: Weighted Methods Per Class
        description: 'This is the sum of cyclomatic complexities for all the methods in the class. In the same way that cyclomatic complexity gives an indication of the amount of testing required for an individual function, this metric gives an indication of the amount of testing required for a whole class.'
        histogram_num_bins: 10
        histogram_minval: 0
        histogram_maxval: 10 
        histogram_title_xaxis: Weighted Methods Per Class (STWMC)
        histogram_title_yaxis: Number of classes
        data_type: int 
        metric_type: class

